"use strict";
/**
 * isCNPJ()
 * Calcula se um CNPJ é válido
 *
 * @doc
 * - CNPJ deve possuir 14 dígitos no formato 00.000.000/0000-00
 *
 * - Os caracteres 1 a 8 são números sequenciais definidos pela Receita Federal
 *
 * - Os caracteres 9 a 12 são a identificação das filiais da empresa.
 *
 * - Os caracteres 13 e 14 são os dígitos verificadores
 *
 * 1) Partes do número
 *  _______________________________ _______________ _______
 * | Número                        |    Filiais    |  DV   |
 * | 1   1 . 2   2   2 . 3   3   3 / 0   0   0   1 - X   Y |
 * |_______________________________|_______________|_______|
 *
 * 2) Cálculo do primeiro DV.
 *
 *  - Soma-se o produto das algarismos 1 a 12 pelos números 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2
 *
 *    1   1   2   2   2   3   3   3   0   0   0   1
 *    x   x   x   x   x   x   x   x   x   x   x   x
 *    5   4   3   2   9   8   7   6   5   4   3   2
 * =  5  +4  +6  +4 +18 +24 +21 +18  +0  +0  +0  +2 = 102
 *
 *  - O somatório encontrado é dividido por 11 e o resultado é subtraído de 11
 *    102 / 11 tem resto 8. 11 - 3 = 8. DV1 é 8.
 *    Obs.: Caso o cálculo de DV1 retorne 10, o resultado será 0.
 *
 * 3) Cálculo do segundo DV.
 *
 *  - Soma-se o produto das algarismos 1 a 13 (incluindo o DV1 calculado) pelos
 *    números 6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2.
 *
 *    1   1   2   2   2   3   3   3   0   0   0   1   8
 *    x   x   x   x   x   x   x   x   x   x   x   x   x
 *    6   5   4   3   2   9   8   7   6   5   4   3   2
 * =  6  +5  +8  +6  +4 +27 +24 +21  +0  +0  +0  +3 +16 = 120
 *
 *  - O somatório encontrado é dividido por 11 e o resultado é subtraído de 11
 *    120 / 11 tem resto 10. 11 - 10 = 1. DV2 é 1.
 *    Obs.: Caso o cálculo de DV2 retorne 10, o resultado será 0.
 *
 * Fonte: http://www.macoratti.net/alg_cnpj.htm
 *
 * @param {String} value Título eleitoral
 * @returns {Boolean}
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate = exports.validateOrFail = exports.fake = exports.mask = exports.dv = void 0;
const ValidationBRError_1 = __importDefault(require("./data/ValidationBRError"));
const utils_1 = require("./utils");
exports.dv = (value) => {
    const cnpj = utils_1.clearValue(value, 12, {
        trimAtRight: true,
        rejectEmpty: true,
    });
    const sum1 = utils_1.sumElementsByMultipliers(cnpj.substring(0, 12), '543298765432');
    const dv1 = utils_1.sumToDV(sum1);
    const sum2 = utils_1.sumElementsByMultipliers(cnpj.substring(0, 12) + dv1, '6543298765432');
    const dv2 = utils_1.sumToDV(sum2);
    return `${dv1}${dv2}`;
};
/**
 * Aplica uma máscara ao número informado
 *
 * @param {String} value Número de Processo
 * @returns {String} Valor com a máscara
 */
exports.mask = (value) => utils_1.applyMask(value, '00.000.000/0000-00');
/**
 *
 *
 */
exports.fake = (withMask = false) => {
    const num = utils_1.fakeNumber(12, true);
    const cnpj = `${num}${exports.dv(num)}`;
    if (withMask)
        return exports.mask(cnpj);
    return cnpj;
};
/**
 * validateOrFail()
 * Valida se um número é válido e
 * retorna uma exceção se não estiver
 *
 * @param {String|Number} value Número a ser validado
 * @returns {Boolean}
 */
exports.validateOrFail = (value) => {
    const cnpj = utils_1.clearValue(value, 14, {
        fillZerosAtLeft: true,
        rejectEmpty: true,
        rejectHigherLength: true,
        rejectEqualSequence: true,
    });
    if (exports.dv(cnpj) !== cnpj.substring(12, 14)) {
        throw ValidationBRError_1.default.INVALID_DV;
    }
    return true;
};
/**
 * validate()
 * Valida se um número é válido
 *
 * @param {String|Number} value Número a ser validado
 * @returns {Boolean}
 */
exports.validate = (value) => {
    try {
        return exports.validateOrFail(value);
    }
    catch (error) {
        return false;
    }
};
exports.default = exports.validate;
//# sourceMappingURL=cnpj.js.map